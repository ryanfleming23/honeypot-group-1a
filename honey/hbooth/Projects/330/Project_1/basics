open Funs

(***********************************)
(* Part 1: Non-Recursive Functions *)
(***********************************)

let abs x = if x >= 0 then x else x - (2*x)

let rev_tup tup = match tup with
(a,b,c) -> (c,b,a)

let is_even x = if (x mod 2 = 0) then true else false

let area point1 point2 = match point1, point2 with
| (a,b),(c,d) -> abs(a - c) * abs(b - d)

(*******************************)
(* Part 2: Recursive Functions *)
(*******************************)

let rec fibonacci n = if n = 0 then 0 else if n = 1 then 1 else fibonacci (n - 1) + fibonacci (n - 2)

let rec pow x p = if p = 0 then 1 else if p = 1 then x else x * (pow x (p - 1))

let rec log x y = if  y < x then 0 else 1 + log x (y/x)

let rec gcf x y = if y = 0 then x else gcf y (x mod y)

(*****************)
(* Part 3: Lists *)
(*****************)

let rec rev_help lst lst2 = match lst with
| [] -> lst2
| h::t -> rev_help t (h::lst2)

let reverse lst = rev_help lst []

let rec zip lst1 lst2 = match lst1, lst2 with
| [] , _ -> []
| _ , [] -> []
| (a,b)::t , (c,d)::p -> (a,b,c,d)::zip t p

let rec merge lst1 lst2 = match lst1, lst2 with
| _ , [] -> lst1
| [], _ -> lst2
| h::t , p::q -> if h <= p then h::merge t lst2 else p::merge lst1 q

let rec is_present lst v = match lst with
| [] -> false
| h::t -> if h = v then true else is_present t v

let rec every_help n lst count = match lst with
| [] -> []
| h::t -> if n = count then h::every_help n t 1 else every_help n t (count + 1)

let every_nth n lst = every_help n lst 1

let rec jump_help lst1 lst2 index new1 new2 = match lst1, lst2 with
| [], [] -> (reverse new1) @ (reverse new2)
| (a,b)::t , (c,d)::q -> if index mod 2 = 0 then jump_help t q (index + 1) (d::new1) (a::new2)
else jump_help t q (index + 1) (a::new1) (d::new2)

let jumping_tuples lst1 lst2 = jump_help lst1 lst2 0 [] []

let maximum x y = if x > y then x else y

let rec max_func_chain init funcs = match funcs with
| [] -> init
| h::t -> maximum (maximum (h init) (max_func_chain (h init) t )) (max_func_chain init t)

(*****************)
(* Part 4: HOF *)
(*****************)

let is_there lst x = fold (fun a y -> a || x = y) false lst

let count_occ lst target = fold (fun a y -> if y = target then (a + 1) else a) 0 lst

let uniq lst = fold (fun a y -> if is_there a y then a else y::a) [] lst

let every_xth x lst = let (return,_) = fold (fun (a,idx) y -> if idx mod x = 0 then (a @ [y], 1) else (a,idx+1)) ([],1) lst in return
